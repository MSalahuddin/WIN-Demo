apply plugin: "com.android.application"
apply plugin: 'com.google.gms.google-services' // <- Add this line


import com.android.build.OutputFile
apply plugin: 'im.getsocial'
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js",
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);
project.ext.envConfigFiles = [
    dev:".env",
    stg: ".env",
    prod: ".env"
]

android {
    lintOptions { checkReleaseBuilds false }
    compileSdkVersion rootProject.ext.compileSdkVersion
    flavorDimensions "default"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
      aaptOptions {
    useNewCruncher false
   }

   getsocial {
        appId project.env.get("GETSOCIAL_APP_ID")
    }

    defaultConfig {
        applicationId "com.playtertainment.ww"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.12.8"
        multiDexEnabled true 
        manifestPlaceholders = [
            auth0Domain : project.env.get("AUTH0_DOMAIN"),
            BRANCH_KEY_TEST : project.env.get("BRANCH_KEY_TEST"),
            BRANCH_KEY_LIVE:project.env.get("BRANCH_KEY_LIVE")
        ]

    }
    productFlavors {
        dev {
            applicationIdSuffix ".dev"
            resValue "string", "build_config_package", "com.playtertainment.ww"
        }
        stg {
            applicationIdSuffix ".stg"
            resValue "string", "build_config_package", "com.playtertainment.ww"
        }
        prod {
            resValue "string", "build_config_package", "com.playtertainment.ww"
        }
    }

        productFlavors.all{ flavor->
        if (flavor.name.equals("dev")) {
            manifestPlaceholders =   [ 
            auth0Domain : project.env.get("AUTH0_DOMAIN"),
            auth0Scheme: "com.playtertainment.ww.dev",
            BRANCH_KEY_TEST : project.env.get("BRANCH_KEY_TEST"),
            BRANCH_KEY_LIVE:project.env.get("BRANCH_KEY_LIVE")
            ]
        }
         if (flavor.name.equals("stg")) {
            manifestPlaceholders =   [ 
            auth0Domain : project.env.get("AUTH0_DOMAIN"),
            auth0Scheme: "com.playtertainment.ww.stg",
            BRANCH_KEY_TEST : project.env.get("BRANCH_KEY_TEST"),
            BRANCH_KEY_LIVE:project.env.get("BRANCH_KEY_LIVE")
            ]
        }
         if (flavor.name.equals("prod")) {
            manifestPlaceholders =   [ 
            auth0Domain : project.env.get("AUTH0_DOMAIN"),
            auth0Scheme: "com.playtertainment.ww",
            BRANCH_KEY_TEST : project.env.get("BRANCH_KEY_TEST"),
            BRANCH_KEY_LIVE:project.env.get("BRANCH_KEY_LIVE")
            ]
        }
    }


    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

    }
    buildTypes {
          customDebugType {
            debuggable true
        }

        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://facebook.github.io/react-native/docs/signed-apk-android.
            crunchPngs false
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

        }
    }
}

repositories {
    maven {
        //IronSource
        url "https://android-sdk.is.com/"
    }
    maven { url "https://sdk.tapjoy.com/"}
    maven {url 'https://artifact.bytedance.com/repository/pangle'}
}



dependencies {
     implementation 'androidx.lifecycle:lifecycle-process:2.2.0'
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(':react-native-branch')
    implementation "io.branch.sdk.android:library:+"
    implementation "com.facebook.react:react-native:+"  // From node_modules
    // implementation 'com.google.android.gms:play-services-ads-identifier:16+'
    implementation project(':react-native-config')
    // implementation project(':react-native-push-notification')
    implementation project(':react-native-iap')
    implementation project(':getsocial-react-native-sdk')
     // Blueshift Android SDK
    implementation "com.blueshift:android-sdk-x:3.2.8"
    // Firebase Cloud Messaging
     implementation platform('com.google.firebase:firebase-bom:30.2.0')
    // Declare the dependencies for the Firebase Cloud Messaging and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-analytics'
    // Add Google Ad Services
    implementation fileTree(dir: 'libs', include: ['*.jar'])
   implementation 'com.google.android.gms:play-services-ads-identifier:17.0.0'
    implementation 'com.google.android.gms:play-services-basement:17.1.1'
     
     implementation 'com.ironsource.sdk:mediationsdk:7.2.3.1' 
    // Add AdColony Network
    implementation 'com.ironsource.adapters:adcolonyadapter:4.3.12'
    implementation 'com.adcolony:sdk:4.7.1'
    // // Add AdMob and Ad Manager Netwok
    implementation 'com.google.android.gms:play-services-ads:21.0.0'
    implementation 'com.ironsource.adapters:admobadapter:4.3.29'
    // // Add Applovin Network
    implementation 'com.ironsource.adapters:applovinadapter:4.3.29'
    implementation 'com.applovin:applovin-sdk:10.3.5'
    // // Add Facebook Network
    implementation 'com.ironsource.adapters:facebookadapter:4.3.36'
    implementation 'com.facebook.android:audience-network-sdk:6.11.0'
    // Add InMobi Network
    implementation 'com.ironsource.adapters:inmobiadapter:4.3.14' 
    implementation 'com.inmobi.monetization:inmobi-ads:10.0.7' 
    implementation 'com.android.support:customtabs:28.0.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
     // Add Pangle Network
    implementation 'com.ironsource.adapters:pangleadapter:4.3.14'
    implementation 'com.pangle.global:ads-sdk:4.5.0.4'
    // Add Tapjoy Network
    implementation 'com.ironsource.adapters:tapjoyadapter:4.1.20'
    implementation 'com.tapjoy:tapjoy-android-sdk:12.9.1'
    // Add UnityAds Network
    implementation 'com.ironsource.adapters:unityadsadapter:4.3.21'
    implementation 'com.unity3d.ads:unity-ads:4.1.0'

    // Facebook SDK
    implementation 'com.facebook.android:facebook-android-sdk:[5,6)'

    implementation 'com.google.code.gson:gson:2.8.5'
  
    implementation project(':react-native-svg')
   

    implementation("com.squareup.okhttp3:okhttp-urlconnection:4.4.1")

    implementation 'com.facebook.fresco:animated-gif:2.0.0'

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")  
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
    implementation 'com.amplitude:android-sdk:2.19.1' // native sdk of amplitude
    implementation project(':react-native-amplitude-analytics') // our react-native module
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
