// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component TokenPacksContainer renders correctly when isUserLoggedIn 1`] = `
<View
  style={
    Array [
      Object {
        "height": "100%",
        "width": "100%",
      },
    ]
  }
>
  <RCTScrollView
    automaticallyAdjustContentInsets={false}
    contentInset={
      Object {
        "bottom": 0,
      }
    }
    enableAutomaticScroll={true}
    enableOnAndroid={false}
    enableResetScrollToCoords={true}
    extraHeight={75}
    extraScrollHeight={30}
    getScrollResponder={[Function]}
    handleOnScroll={[Function]}
    keyboardDismissMode="interactive"
    keyboardOpeningTime={250}
    keyboardSpace={0}
    onScroll={[Function]}
    resetKeyboardSpace={[Function]}
    scrollEventThrottle={1}
    scrollForExtraHeightOnAndroid={[Function]}
    scrollIntoView={[Function]}
    scrollToEnd={[Function]}
    scrollToFocusedInput={[Function]}
    scrollToPosition={[Function]}
    showsVerticalScrollIndicator={true}
    update={[Function]}
    viewIsInsideTabBar={false}
  >
    <View>
      <RCTScrollView
        automaticallyAdjustContentInsets={false}
        contentContainerStyle={
          Object {
            "paddingBottom": 32,
          }
        }
        contentInset={
          Object {
            "bottom": 0,
          }
        }
        data={null}
        disableVirtualization={false}
        enableAutomaticScroll={true}
        enableOnAndroid={false}
        enableResetScrollToCoords={true}
        extraHeight={75}
        extraScrollHeight={0}
        getItem={[Function]}
        getItemCount={[Function]}
        getScrollResponder={[Function]}
        handleOnScroll={[Function]}
        horizontal={false}
        initialNumToRender={4}
        keyExtractor={[Function]}
        keyboardDismissMode="interactive"
        keyboardOpeningTime={250}
        keyboardSpace={0}
        maxToRenderPerBatch={10}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        resetKeyboardSpace={[Function]}
        scrollEventThrottle={1}
        scrollForExtraHeightOnAndroid={[Function]}
        scrollIntoView={[Function]}
        scrollToEnd={[Function]}
        scrollToFocusedInput={[Function]}
        scrollToPosition={[Function]}
        showsVerticalScrollIndicator={true}
        stickyHeaderIndices={Array []}
        update={[Function]}
        updateCellsBatchingPeriod={50}
        viewIsInsideTabBar={false}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <View />
      </RCTScrollView>
    </View>
  </RCTScrollView>
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "height": "100%",
          "justifyContent": "center",
          "width": "100%",
        },
      ]
    }
  >
    <ActivityIndicator
      animating={true}
      color="#FFFFFF"
      hidesWhenStopped={true}
      size="large"
    />
  </View>
</View>
`;

exports[`Component TokenPacksContainer renders correctly when isUserLoggedIn={false} 1`] = `
<View
  style={
    Array [
      Object {
        "height": "100%",
        "width": "100%",
      },
    ]
  }
>
  <RCTScrollView
    automaticallyAdjustContentInsets={false}
    contentInset={
      Object {
        "bottom": 0,
      }
    }
    enableAutomaticScroll={true}
    enableOnAndroid={false}
    enableResetScrollToCoords={true}
    extraHeight={75}
    extraScrollHeight={30}
    getScrollResponder={[Function]}
    handleOnScroll={[Function]}
    keyboardDismissMode="interactive"
    keyboardOpeningTime={250}
    keyboardSpace={0}
    onScroll={[Function]}
    resetKeyboardSpace={[Function]}
    scrollEventThrottle={1}
    scrollForExtraHeightOnAndroid={[Function]}
    scrollIntoView={[Function]}
    scrollToEnd={[Function]}
    scrollToFocusedInput={[Function]}
    scrollToPosition={[Function]}
    showsVerticalScrollIndicator={true}
    update={[Function]}
    viewIsInsideTabBar={false}
  >
    <View>
      <RCTScrollView
        automaticallyAdjustContentInsets={false}
        contentContainerStyle={
          Object {
            "paddingBottom": 32,
          }
        }
        contentInset={
          Object {
            "bottom": 0,
          }
        }
        data={null}
        disableVirtualization={false}
        enableAutomaticScroll={true}
        enableOnAndroid={false}
        enableResetScrollToCoords={true}
        extraHeight={75}
        extraScrollHeight={0}
        getItem={[Function]}
        getItemCount={[Function]}
        getScrollResponder={[Function]}
        handleOnScroll={[Function]}
        horizontal={false}
        initialNumToRender={4}
        keyExtractor={[Function]}
        keyboardDismissMode="interactive"
        keyboardOpeningTime={250}
        keyboardSpace={0}
        maxToRenderPerBatch={10}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        resetKeyboardSpace={[Function]}
        scrollEventThrottle={1}
        scrollForExtraHeightOnAndroid={[Function]}
        scrollIntoView={[Function]}
        scrollToEnd={[Function]}
        scrollToFocusedInput={[Function]}
        scrollToPosition={[Function]}
        showsVerticalScrollIndicator={true}
        stickyHeaderIndices={Array []}
        update={[Function]}
        updateCellsBatchingPeriod={50}
        viewIsInsideTabBar={false}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <View />
      </RCTScrollView>
    </View>
  </RCTScrollView>
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "height": "100%",
          "justifyContent": "center",
          "width": "100%",
        },
      ]
    }
  >
    <ActivityIndicator
      animating={true}
      color="#FFFFFF"
      hidesWhenStopped={true}
      size="large"
    />
  </View>
</View>
`;
